// Copyleft 2005 Chris Korda
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or any later version.
/*
        chris korda
 
		revision history:
		rev		date	comments
        00      21may05	initial version
		01		19feb06	make write functions const
		02		23mar06	use BYTE instead of INT for booleans
        03      17apr06	move I/O and non-parm data into CPatch
		04		10dec07	add global parameters
		05		13dec07	add even and odd shear
		06		15jan08	add globals for line width and poly sides
		07		28jan08	support Unicode

		parameter container
 
*/

#ifndef CPARMINFO_INCLUDED
#define CPARMINFO_INCLUDED

class CParmInfo {
public:
// Construction
	CParmInfo() {}	// use SetDefaults to initialize this object
	~CParmInfo() {}

// Types
	typedef struct tagROW {
		double	Val;	// parameter's base value, to which modulation is applied
		int		Wave;	// modulation waveform; see enum in COscillator.h
		double	Freq;	// modulation frequency, in Hz
		double	Amp;	// modulation amplitude; can be negative for phase inversion
		double	PW;		// pulse width, from 0..1; only meaningful for pulse waveform
	} ROW;
	typedef struct tagROWDATA {	// these constants are generated by ParmDef.h macro
		LPCTSTR	Name;		// parameter name
		int		TitleID;	// parameter display title, as string resource ID
		double	MinVal;		// parameter minimum value; used for slider range only
		double	MaxVal;		// parameter maximum value; used for slider range only
		int		Steps;		// parameter slider precision, as a number of steps
		double	Scale;		// parameter scaling factor
	} ROWDATA;

// Constants
	#undef PARMDEF
	#define PARMDEF(Name, Tag, MinVal, MaxVal, Steps, Scale) Tag,
	enum {	// automatically generate row enumerators from ParmDef.h macro
		#include "ParmDef.h"
		ROWS
	};
	enum {	// oscillator properties
		OSC_WAVE,
		OSC_AMP,
		OSC_FREQ,
		OSC_PW,
		OSC_PROPS
	};
	enum {
		GLOBAL_PARMS = 12	// number of global parameters; must match m_GlobParm
	};
	static	const	ROWDATA	m_RowData[ROWS];	// constant data for each row
	static	const	int		m_RowOrder[ROWS];	// display order of rows
	static	const	int		m_GlobParm[GLOBAL_PARMS];	// global parameters

// Public data
	ROW		m_Row[ROWS];	// array of parameter rows

// Operations
	void	SetDefaults();
	void	SetOscProps(const CParmInfo& Src, int RowIdx);
};

inline void CParmInfo::SetOscProps(const CParmInfo& Src, int RowIdx)
{
	ASSERT(RowIdx >= 0 && RowIdx < ROWS);
	memcpy(&m_Row[RowIdx].Wave, &Src.m_Row[RowIdx].Wave,
		sizeof(ROW) - offsetof(ROW, Wave));	// copy all ROW members except Val
}

#endif
